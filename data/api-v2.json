{
  "base": "https://api.freestuffbot.xyz/v2",
  "@": {
    "generic-error": {
      "body": {
        "type": "urn:fsb:problem:name-here",
        "title": "error name",
        "detail": "error message"
      },
      "headers": {
        "X-Server-Time": "<timestamp:int> // current server time in unix ms"
      }
    },
    "generic-502": {
      "code": 502,
      "desc": "An internal error, try again after a few seconds.",
      "returns": "@generic-error"
    }
  },
  "models": {
    "ProductKind": {
      "type": "string",
      "schema": [
        "game // normal games",
        "dlc // game addons",
        "loot // ingame content",
        "software // non-game software (unused)",
        "art // digital artwork (unused)",
        "ost // game soundtrack (unused)",
        "book // digital book (unused)",
        "other // other kinds of content, gaming related"
      ]
    },
    "ProductApprovalStatus": {
      "type": "string",
      "schema": [
        "pending // data has been aggregated but is awaiting verification through a human content moderator",
        "issues // unused",
        "approved // the product was approved by a human content moderator or automated system but is not yet published",
        "processing // the product is in a loading state. automated systems are processing the product, e.g. scraping data",
        "published // this product has been published"
      ]
    },
    "Store": {
      "type": "string",
      "schema": [
        "other",
        "steam",
        "epic",
        "humble",
        "gog",
        "origin",
        "ubi",
        "itch",
        "prime",
        "// Please note that this list is non-exhaustive! While the names above will not change, new stores may be added at will and this documentation might not always be up to date with all possible values. Be sure to handle unknown platform values properly, e.g. treating them as 'other' until further differenciated."
      ]
    },
    "Platform": {
      "type": "string",
      "schema": [
        "windows",
        "mac",
        "linux",
        "android",
        "ios",
        "xbox",
        "playstation",
        "// Please note that this list is non-exhaustive! While the names above will not change, new platforms may be added at will and this documentation might not always be up to date with all possible values. Be sure to handle unknown platform values properly, e.g. ignoring them."
      ]
    },
    "Product": {
      "type": "Object",
      "schema": [
        "{",
        "  id: int",
        "  title: string",
        "  prices: ProductPrice[]",
        "  kind: ProductKind",
        "  tags: string[] // unsorted, non-standardized, human readable",
        "  images: ProductImage[] // *this array will only have a subset of all available images on the free tier",
        "  description: string // human readable description in english language",
        "  rating: float // this is an aggregated score where 0 represents the worst possible and 1 the best possible rating",
        "  copyright: string // name of the ip copyright holder",
        "  until: int // unix timestamp in ms",
        "  type: PublishingChannel",
        "  urls: ProductUrl[] // *this array will only have a subset of all available urls on the free tier",
        "  store: Store // steam, epic games, etc.",
        "  flags: ProductFlags",
        "  notice: string // a rare optional extra info text added by a FreeStuff team member meant for public display alongside the product",
        "  staffApproved: boolean // true means a human checked the data prior to being published",
        "  *platforms: Platform[] // *this array will always be empty on the free tier",
        "  *meta: ProductMeta[] // *this array will always be empty on the free tier",
        "}"
      ]
    },
    "ProductImage": {
      "type": "Object",
      "schema": [
        "{",
        "  url: string",
        "  flags: ProductImageFlags",
        "  priority: int // a number indicating how well a certain image is suited for presentation; higher is better",
        "}"
      ]
    },
    "ProductUrl": {
      "type": "Object",
      "schema": [
        "{",
        "  url: string",
        "  flags: ProductUrlFlags",
        "  priority: int // a number indicating how well a certain url is suited for use; higher is better",
        "}"
      ]
    },
    "ProductPrice": {
      "type": "Object",
      "schema": [
        "{",
        "  currency: string // currency code as by https://www.iban.com/currency-codes",
        "  oldValue: int // price before the discount; in the currency's smallest unit, e.g. cents; a value of 499 in usd would correspond to $4.99",
        "  newValue: int // price after the discount; in the currency's smallest unit; usually 0 if product is free",
        "  converted: boolean // if true the value was converted from either the product's EUR or USD price using market conversion rates; if false the value was taken from the store directly and is usually more accurate",
        "}"
      ]
    },
    "ProductImageFlags": {
      "type": "int (bitfield)",
      "schema": [
        "1<<0 (PROXIED) // if this image is proxied and/or provided by FreeStuff",
        "1<<1 (AR_WIDE) // aspect ratio: image is in landscape orientation",
        "1<<2 (AR_SQUARE) // aspect ratio: image is square",
        "1<<3 (AR_TALL) // aspect ratio: image is in portrait orientation",
        "1<<4 (TP_PROMO) // type: promotional image",
        "1<<5 (TP_LOGO) // type: product's logo",
        "1<<6 (TP_SHOWCASE) // type: showcase screenshot (e.g. ingame screenshot)",
        "1<<7 (TP_OTHER) // type: other, any other kind of image",
        "1<<8 (FT_WATERMARK) // feature: the image has a FreeStuff watermark on it",
        "1<<9 (FT_TAGS) // feature: the image has the tags rendered onto it",
        "// note: All flags are optional. Additional internal flags exist that are not documented here - your implementation must be able to handle them."
      ]
    },
    "ProductUrlFlags": {
      "type": "int (bitfield)",
      "schema": [
        "1<<0 (ORIGINAL) // only the original link gets this flag",
        "1<<1 (PROXIED) // the url is proxied through FreeStuff or a thid party",
        "1<<2 (TRACKING) // the url is tracking how many times it has been clicked. No pii is collected.",
        "1<<3 (OPENS_IN_BROWSER) // the url opens the platform's website",
        "1<<4 (OPENS_IN_CLIENT) // the url opens in the platform's client applications",
        "// note: All flags are optional. Additional internal flags exist that are not documented here - your implementation must be able to handle them."
      ]
    },
    "ProductFlags": {
      "type": "int (bitfield)",
      "schema": [
        "1<<0 (TRASH) // game is filtered out by the low quality setting",
        "1<<1 (THIRDPARTY) // game is offered trough a thirdparty site (deprecated)",
        "1<<2 (PERMANENT) // the offer is permanent",
        "1<<3 (STAFF_PICK) // the offer is marked as a \"staff pick\"",
        "1<<4 (FIRSTPARTY_EXCLUSIVE) // the offer is only shown on FreeStuff's official channels. You should never receive a product with this flag. If you do, please ignore it.",
        "// note: All flags are optional. Additional internal flags exist that are not documented here - your implementation must be able to handle them."
      ]
    },
    "ProductMeta": {
      "type": "Object",
      "schema": [
        "{",
        "  key: ProductMetaKey",
        "  value: string // depending on the key, certain metadata may be of numeric or boolean form. These values are still encoded and delivered as JSON compatible strings. E.g. \"true\", \"false\", \"12\", \"-4e8\"",
        "}"
      ]
    },
    "ProductMetaKey": {
      "type": "string",
      "schema": [
        "slug // unique id on the product's store",
        "scraper.sources // the sources used by the webscraper",
        "scraper.version // the version of the webscraper used",
        "igdb.gameid // id of the product's corresponding game in the igdb",
        "steam.subids // steam subids, if any, comma seperated",
        "steam.achievements // steam achievement count",
        "steam.recommendations // steam number of curator recommendations",
        "epic.namespace // epic games namespace",
        "epic.id // epic games id",
        "itch.creator // itch.io creator name",
        "prime.itemid // prime itemid",
        "prime.offerid // prime offerid",
        "prime.codegrant // prime does this product grant a code?",
        "prime.direct // prime is this product a direct claim?",
        "prime.linkitem // prime is this product a retail link item?",
        "prime.fgwp // prime is product flagged as Free Games With Prime?",
        "prime.priority // prime listing priority",
        "// note: This list is non-exhaustive and only shows commonly used keys. Additional metadata may be present. Fields starting with a store name are only present on products coming from this store."
      ]
    },
    "Announcement": {
      "type": "Object",
      "schema": [
        "{",
        "  id: number",
        "  urn: string",
        "  products: int[] // ids of all products in the announcement",
        "}"
      ]
    },
    "Channel": {
      "type": "string",
      "schema": [
        "keep // Free to Keep / 100% discount",
        "timed // Free to play / Free weekend",
        "prime // Available through Prime Gaming",
        "gamepass // Available through GamePass",
        "other // DLCs & More / everything else",
        "debug // exclusively used internally"
      ]
    }
  },
  "endpoints": {
    "get-ping": {
      "method": "GET",
      "route": "/ping",
      "params": [
        {
          "location": "header",
          "key": "Authorization",
          "type": "string",
          "desc": "Your Bearer token"
        }
      ],
      "responses": [
        {
          "code": 200,
          "desc": "Success",
          "returns": {
            "body": "@",
            "headers": {}
          }
        }
      ]
    },
    "get-products": {
      "method": "GET",
      "route": "/products",
      "params": [
        {
          "location": "header",
          "key": "Authorization",
          "type": "string",
          "desc": "Your Bearer token"
        },
        {
          "location": "query",
          "key": "limit",
          "type": "?int",
          "desc": "Limit how many products are returned at once"
        },
        {
          "location": "query",
          "key": "offset",
          "type": "?int",
          "desc": "Offset the results. Used with limit parameter for pagination."
        },
        {
          "location": "query",
          "key": "type",
          "type": "?Channel",
          "desc": "Only list products with the given type"
        },
        {
          "location": "query",
          "key": "kind",
          "type": "?ProductKind",
          "desc": "Only list products with the given kind"
        },
        {
          "location": "query",
          "key": "since",
          "type": "?int (unix ms time)",
          "desc": "Only list products published at or after the given timestamp"
        }
      ],
      "responses": [
        {
          "code": 200,
          "desc": "Success",
          "returns": {
            "body": {
              "TODO": true
            },
            "headers": {
              "X-Server-Time": "<timestamp:int> // current server time in unix ms",
              "X-Next-Page": "<offset:int> // which 'offset' query variable should be used to get the next page. this header is not present if the end of the list is reached",
              "X-Next-Since": "<timestamp:int> // only if the request had a 'since' query parameter - which 'since' query variable should be used when requesting the next time",
              "X-Check-Again": "<seconds:int> // only if the request had a 'since' query parameter - a recommendation on how many seconds to wait until requesting the next time. this value might decrease during peak times and increase during unlikely moments."
            }
          }
        },
        {
          "code": 400,
          "desc": "Invalid product id.",
          "returns": "@generic-error"
        },
        {
          "code": 404,
          "desc": "No product with your id was found.",
          "returns": "@generic-error"
        },
        "@generic-502"
      ]
    },
    "get-products-id": {
      "method": "GET",
      "route": "/products/:id",
      "params": [
        {
          "location": "route",
          "key": ":id",
          "type": "string",
          "desc": "The id of the product you're looking up"
        },
        {
          "location": "header",
          "key": "Authorization",
          "type": "string",
          "desc": "Your Bearer token"
        },
        {
          "location": "query",
          "key": "localize",
          "type": "?string[]",
          "desc": "Deprecated. Returns a localized object for each language provided in the query value."
        }
      ],
      "responses": [
        {
          "code": 200,
          "desc": "Success",
          "returns": {
            "body": {
              "TODO": true
            },
            "headers": {
              "X-Server-Time": "<integer timestamp>"
            }
          }
        },
        {
          "code": 400,
          "desc": "Invalid product id.",
          "returns": "@generic-error"
        },
        {
          "code": 404,
          "desc": "No product with your id was found.",
          "returns": "@generic-error"
        },
        "@generic-502"
      ]
    }
  }
}